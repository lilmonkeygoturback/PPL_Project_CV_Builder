# Generated from CV.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,127,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,5,9,67,8,9,10,9,12,9,70,9,9,1,
        9,1,9,1,10,1,10,1,10,3,10,77,8,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,13,3,13,88,8,13,1,13,1,13,1,13,4,13,93,8,13,11,13,12,
        13,94,3,13,97,8,13,1,13,3,13,100,8,13,1,14,1,14,1,14,5,14,105,8,
        14,10,14,12,14,108,9,14,3,14,110,8,14,1,15,1,15,3,15,114,8,15,1,
        15,4,15,117,8,15,11,15,12,15,118,1,16,4,16,122,8,16,11,16,12,16,
        123,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,0,23,0,25,0,27,11,29,0,31,0,33,12,1,0,8,4,0,10,10,13,13,34,
        34,92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,
        116,3,0,48,57,65,70,97,102,1,0,48,57,1,0,49,57,2,0,69,69,101,101,
        2,0,43,43,45,45,3,0,9,10,13,13,32,32,133,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,27,1,0,0,0,0,33,1,0,0,0,1,
        35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,43,1,0,0,0,11,
        45,1,0,0,0,13,47,1,0,0,0,15,52,1,0,0,0,17,58,1,0,0,0,19,63,1,0,0,
        0,21,73,1,0,0,0,23,78,1,0,0,0,25,84,1,0,0,0,27,87,1,0,0,0,29,109,
        1,0,0,0,31,111,1,0,0,0,33,121,1,0,0,0,35,36,5,123,0,0,36,2,1,0,0,
        0,37,38,5,44,0,0,38,4,1,0,0,0,39,40,5,125,0,0,40,6,1,0,0,0,41,42,
        5,58,0,0,42,8,1,0,0,0,43,44,5,91,0,0,44,10,1,0,0,0,45,46,5,93,0,
        0,46,12,1,0,0,0,47,48,5,116,0,0,48,49,5,114,0,0,49,50,5,117,0,0,
        50,51,5,101,0,0,51,14,1,0,0,0,52,53,5,102,0,0,53,54,5,97,0,0,54,
        55,5,108,0,0,55,56,5,115,0,0,56,57,5,101,0,0,57,16,1,0,0,0,58,59,
        5,110,0,0,59,60,5,117,0,0,60,61,5,108,0,0,61,62,5,108,0,0,62,18,
        1,0,0,0,63,68,5,34,0,0,64,67,3,21,10,0,65,67,8,0,0,0,66,64,1,0,0,
        0,66,65,1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,71,
        1,0,0,0,70,68,1,0,0,0,71,72,5,34,0,0,72,20,1,0,0,0,73,76,5,92,0,
        0,74,77,7,1,0,0,75,77,3,23,11,0,76,74,1,0,0,0,76,75,1,0,0,0,77,22,
        1,0,0,0,78,79,5,117,0,0,79,80,3,25,12,0,80,81,3,25,12,0,81,82,3,
        25,12,0,82,83,3,25,12,0,83,24,1,0,0,0,84,85,7,2,0,0,85,26,1,0,0,
        0,86,88,5,45,0,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,96,
        3,29,14,0,90,92,5,46,0,0,91,93,7,3,0,0,92,91,1,0,0,0,93,94,1,0,0,
        0,94,92,1,0,0,0,94,95,1,0,0,0,95,97,1,0,0,0,96,90,1,0,0,0,96,97,
        1,0,0,0,97,99,1,0,0,0,98,100,3,31,15,0,99,98,1,0,0,0,99,100,1,0,
        0,0,100,28,1,0,0,0,101,110,5,48,0,0,102,106,7,4,0,0,103,105,7,3,
        0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,0,0,0,106,107,1,0,
        0,0,107,110,1,0,0,0,108,106,1,0,0,0,109,101,1,0,0,0,109,102,1,0,
        0,0,110,30,1,0,0,0,111,113,7,5,0,0,112,114,7,6,0,0,113,112,1,0,0,
        0,113,114,1,0,0,0,114,116,1,0,0,0,115,117,7,3,0,0,116,115,1,0,0,
        0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,32,1,0,0,0,
        120,122,7,7,0,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,
        123,124,1,0,0,0,124,125,1,0,0,0,125,126,6,16,0,0,126,34,1,0,0,0,
        13,0,66,68,76,87,94,96,99,106,109,113,118,123,1,6,0,0
    ]

class CVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    STRING = 10
    NUMBER = 11
    WS = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "','", "'}'", "':'", "'['", "']'", "'true'", "'false'", 
            "'null'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "STRING", "ESC", "UNICODE", "HEX", "NUMBER", 
                  "INT", "EXP", "WS" ]

    grammarFileName = "CV.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


